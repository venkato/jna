<?xml version="1.0" encoding="UTF-8"?>
<project name="JNA" default="default" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
  <description>Builds and tests JNA</description>

  <!-- Default build compiles all platform-independent stuff as well
       as the JNI bits for the current platform, using the arch model
       of the current Java VM to determine whether 32- or 64-bit
       binaries are built (ANT_OPTS=-d32/-d64 to switch on platforms that
       support it).

       Cross-compile by specifying -Dos.prefix={name-arch} to ant
       (cross-compile currently only configured/tested on w32ce-arm and
       android-arm/-x86) 

       Use ANT_OPTS=-Dskip-native=false to build native parts, or directly
         invoke the native or test targets
       Use ANT_OPTS=-Dheadless to run tests headless
       Use ANT_OPTS=-Drelease to stage a final, non-snapshot version
    -->

  <!--
  Conventions (since ant can't easily specify arbitrary file dependencies):
  The uptodate property for a given target TARGET is "-TARGET"; the actual
  target to generate the uptodate property is named ":TARGET".

  Properties (except for uptodate properties) separate words by dots, targets
  by dashes.
  -->

  <!-- global properties -->
  <!-- (all build-related props should go in -dynamic-properties) -->
  <property name="name" value="jna"/>
  <property name="jar" value="${name}.jar"/>
  <property name="minjar" value="${name}-min.jar"/>
  <property name="testjar" value="${name}-test.jar"/>
  <property name="debug" value="true"/>
  <property name="debug.native" value="false"/>
  <property name="cflags_extra.native" value=""/>
  <property name="dynlink.native" value="false"/>
  <property name="native" location="native"/>
  <property name="src" location="src"/>
  <property name="platform.src" location="contrib/platform/src"/>
  <property name="contrib" location="contrib"/>
  <property name="dist" location="dist"/>
  <property name="lib.native" location="lib/native"/>
  <property name="test.src" location="test"/>
  <property name="doc" location="doc"/>
  <property name="javadoc" location="${doc}/javadoc"/>
  <property name="stylesheet" location="${javadoc}/doc/css/javadoc.css"/>
  <property name="vendor" value="JNA Development Team"/>
  <tstamp>
    <format property="year" pattern="yyyy" locale="en,US"/>
  </tstamp>
  <property name="copyright"
            value="Copyright &amp;copy; 2007-${year} Timothy Wall. All Rights Reserved."/>
  <buildnumber/>
  <!-- JNA library release version -->
  <property name="jna.major" value="4"/>
  <property name="jna.minor" value="2"/>
  <property name="jna.revision" value="0"/>
  <property name="jna.build" value="${build.number}"/>
  <condition property="version.suffix" value="" else="-SNAPSHOT">
    <or>
      <isset property="release"/>
      <isset property="maven-release"/>
    </or>
  </condition>
  <property name="jna.version" value="${jna.major}.${jna.minor}.${jna.revision}${version.suffix}"/>
  <!-- jnidispatch library release version -->
  <property name="jni.major" value="4"/>
  <property name="jni.minor" value="0"/>
  <property name="jni.revision" value="1"/>
  <property name="jni.build" value="${build.number}"/>
  <property name="jni.version" value="${jni.major}.${jni.minor}.${jni.revision}"/>
  <property name="jni.md5" value="bcedb13a0ab06c0049d8ccff575836ea"/>
  <property name="spec.title" value="Java Native Access (JNA)"/>
  <property name="spec.vendor" value="${vendor}"/>
  <property name="spec.version" value="${jna.major}"/>
  <property name="impl.title" value="com.sun.nik"/>
  <property name="impl.vendor" value="${spec.vendor}"/>
  <property name="impl.version" value="${jna.version} (b${jna.build})"/>

  <!-- Set up restrictions for w32ce, based on JavaME/CDC -->
  <condition property="compatibility" value="1.4">
    <equals arg1="${os.prefix}" arg2="w32ce-arm"/>
  </condition>
  <condition property="test.compatibility" value="1.4">
    <equals arg1="${os.prefix}" arg2="w32ce-arm"/>
  </condition>
  <!-- Default compatibility, 1.6, or whatever version is running -->
  <condition property="compatibility" value="${ant.java.version}" else="1.6">
    <matches pattern="^1.[345]$" string="${ant.java.version}"/>
  </condition>
  <!-- Platform default compatibility, 1.5+ -->
  <condition property="platform.compatibility" value="1.5" else="${compatibility}">
    <equals arg1="${compatibility}" arg2="1.4"/>
  </condition>
  <!-- Test default compatibility, 1.5+ -->
  <condition property="test.compatibility" value="1.5" else="${compatibility}">
    <equals arg1="${compatibility}" arg2="1.4"/>
  </condition>
  <condition property="tests.exclude-patterns" value="**/VarArgsTest.java,**/AnnotatedLibraryTest.java,**/WebStartTest.java,**/PointerBufferTest.java,**/HeadlessLoadLibraryTest.java,**/StructureBufferFieldTest.java,**/PerformanceTest.java,**/*BufferArgumentsMarshalTest.java" else="**/wince/*.java,**/WebStartTest.java">
    <equals arg1="${os.prefix}" arg2="w32ce-arm"/>
  </condition>
  <property name="dist-jar" value="${dist}/${jar}"/>

  <!-- Maven -->
  <!-- define Maven coordinates -->
  <property name="groupId" value="net.java.dev.jna" />
  <property name="artifactId" value="jna" />

  <property name="maven-javadoc-jar" value="${dist}/${artifactId}-${jna.version}-javadoc.jar" />
  <property name="maven-sources-jar" value="${dist}/${artifactId}-${jna.version}-sources.jar" />

  <property name="platform-jar" value="${dist}/jna-platform.jar"/>
  <property name="platform-javadoc-jar" value="${dist}/platform-${jna.version}-javadoc.jar" />
  <property name="platform-sources-jar" value="${dist}/platform-${jna.version}-sources.jar" />

  <property name="pom" value="pom-jna.xml" />
  <property name="pom-platform" value="pom-jna-platform.xml" />

  <!-- defined maven snapshots and staging repository id and url -->
  <property name="maven-snapshots-repository-id" value="snapshots.java.net" />
  <property name="maven-snapshots-repository-url" value="https://maven.java.net/content/repositories/snapshots/" />
  <property name="maven-staging-repository-id" value="staging.java.net" />
  <property name="maven-staging-repository-url" value="https://maven.java.net/service/local/staging/deploy/maven2/" />

  <!-- Miscellaneous -->
  <property name="build.compiler.emacs" value="true"/>

  <target name="default" depends="test" description="Build and Test."/>

  <target name="init" depends="-setup"/>

  <target name="compile-single" depends="compile"/>

  <target name="-dynamic-properties">

    <condition property="-native" value="true">
      <not><isset property="build-native"/></not>
    </condition>
    <condition property="jni.valid" value="true">
      <isset property="-native"/>
    </condition>

    <replaceregexp match="(&lt;version&gt;).*(&lt;/version&gt;)"
                   replace="\1${jna.version}\2"
                   file="${pom}"/>

    <replaceregexp match="(&lt;version&gt;).*(&lt;/version&gt;)"
                   replace="\1${jna.version}\2"
                   flags="g"
                   file="${pom-platform}"/>

    <replaceregexp match='VERSION = ".*";'
                   replace='VERSION = "${jna.version}";'
                   file="src/com/sun/nik/Version.java"/>
    <replaceregexp match='VERSION_NATIVE = ".*";'
                   replace='VERSION_NATIVE = "${jni.version}";'
                   file="src/com/sun/nik/Version.java"/>

    <condition property="jar.omitted" value="**/*jnidispatch*" else="jnilib-included">
      <isset property="omit-jnilib"/>
    </condition>
    <condition property="cross-compile" value="true">
      <isset property="os.prefix"/>
    </condition>
    <!-- Sun 1.6 VM for windows doesn't support -d32/-d64 switch -->
    <condition property="vm.64" value="-d64" else="-Ddummy">
      <not><os family="windows"/></not>
    </condition>
    <condition property="vm.32" value="-d32" else="-Ddummy">
      <not><os family="windows"/></not>
    </condition>
    <condition property="vmopt.arch" value="${vm.64}" else="${vm.32}">
      <and>
        <not><equals arg1="${os.prefix}" arg2="android-arm" trim="true"/></not>
        <not><equals arg1="${os.prefix}" arg2="android-x86" trim="true"/></not>
        <or>
          <equals arg1="${sun.arch.data.model}" arg2="64" trim="true"/>
          <equals arg1="${com.ibm.vm.bitmode}" arg2="64" trim="true"/>
          <os arch="x86_64"/>
          <os arch="amd64"/>
          <os arch="em64t"/>
          <os arch="sparcv9"/>
          <os arch="ppc64"/>
          <os arch="ia64"/>
          <os arch="aarch64"/>
        </or>
      </and>
    </condition>
    <condition property="ld.preload" value="LD_PRELOAD_64" else="LD_PRELOAD">
      <and>
        <os name="SunOS"/>
        <equals arg1="${vmopt.arch}" arg2="${vm.64}"/>
      </and>
    </condition>
    <property name="build" value="build"/>
    <property name="classes" location="${build}/classes"/>
    <property name="eclipse.classes" location="build.eclipse/classes"/>
    <property name="test.classes" location="${build}/test-classes"/>
    <property name="reports" value="${build}/reports"/>

    <!-- Add other supported platforms here -->
    <condition property="jre.arch" value="x86">
      <matches pattern="(i[3456]86|pentium)" string="${os.arch}"/>
    </condition>
    <condition property="jre.arch" value="x86-64">
      <matches pattern="(x86_64|amd64|em64t)" string="${os.arch}"/>
    </condition>
    <condition property="jre.arch" value="ppc">
      <matches pattern="(powerpc|power)" string="${os.arch}"/>
    </condition>
    <condition property="jre.arch" value="ppc64">
      <matches pattern="(powerpc64|power64)" string="${os.arch}"/>
    </condition>
    <property name="jre.arch" value="${os.arch}"/>
    <condition property="os.prefix" value="linux-${jre.arch}">
      <os name="Linux"/>
    </condition>
    <condition property="os.prefix" value="aix-${jre.arch}">
      <os name="AIX"/>
    </condition>
    <condition property="os.prefix" value="win32-${jre.arch}">
      <os family="windows"/>
    </condition>
    <!-- Darwin builds are universal, no arch required -->
    <condition property="os.prefix" value="darwin">
      <os family="mac"/>
    </condition>
    <condition property="os.prefix" value="sunos-${jre.arch}">
      <os name="SunOS"/>
    </condition>
    <condition property="os.prefix" value="freebsd-${jre.arch}">
      <os name="FreeBSD"/>
    </condition>
    <condition property="os.prefix" value="openbsd-${jre.arch}">
	<os name="OpenBSD"/>
    </condition>
    <condition property="os.prefix" value="netbsd-${jre.arch}">
      <os name="NetBSD"/>
    </condition>
    <condition property="os.prefix" value="kfreebsd-${jre.arch}">
      <os name="GNU/kFreeBSD"/>
    </condition>
    <fail unless="os.prefix" message="OS/arch not supported (${os.name}/${jre.arch}), edit build.xml and native/Makefile to add it."/>
    <!-- Keep all natives separate -->
    <property name="native.subdir" value="native-${os.prefix}"/>
    <condition property="jdk.home" value="${java.home}">
      <available file="${java.home}/include"/>
    </condition>
    <condition property="jdk.home" value="${java.home}/..">
      <available file="${java.home}/../include"/>
    </condition>
    <condition property="jdk.home" value="/System/Library/Frameworks/JavaVM.framework/Home">
      <available file="/System/Library/Frameworks/JavaVM.framework/Headers"/>
    </condition>
    <fail unless="jdk.home" message="Can't find JNI headers (java.home=${java.home})"/>
    <property name="libarch" value="${os.arch}"/>
    <condition property="libjsig"
               value="${java.home}/lib/${libarch}/libjsig.so" else="">
      <available file="${java.home}/lib/${libarch}/libjsig.so"/>
    </condition>
    <condition property="ld.preload.name" value="${ld.preload}" else="IGNORE">
      <not><equals arg1="${libjsig}" arg2=""/></not>
    </condition>
    <property name="native.jar" value="${os.prefix}.jar"/>
    <property name="build.native" location="${build}/${native.subdir}"/>
    <property name="md5.file" location="${build.native}/jni.checksum"/>

    <mkdir dir="${build}"/>
    <mkdir dir="${build.native}"/>
    <mkdir dir="${classes}"/>
    <mkdir dir="${test.classes}"/>
    <mkdir dir="${reports}"/>
    <mkdir dir="${doc}"/>

    <echo>Java version ${java.version}, compatibility: ${compatibility}</echo>
    <echo>JNA version ${jna.version}, native ${jni.version}</echo>
    <echo>${java.vm.name} (${java.vm.vendor}, ${java.vm.version})</echo>
    <echo>java.home=${java.home}</echo>
    <echo>java.library.path=${java.library.path}</echo>
    <echo>os.prefix=${os.prefix}</echo>
    <echo>os.name=${os.name}</echo>
    <echo>os.arch=${os.arch}</echo>
    <echo>build=${build}</echo>
    <echo>build.native=${build.native}</echo>

  </target>

  <target name="-setup" depends="-dynamic-properties">
    <path id="compile-test.path">
      <path id="test.libs">
        <fileset dir="lib">
          <include name="junit.jar"/>
        </fileset>
        <fileset dir="lib/test"/>
        <pathelement path="${classes}"/>
      </path>
    </path>
    <path id="compile.path"/>
    <path id="src.path">
      <pathelement location="${src}"/>
    </path>
    <path id="test.runpath">
      <pathelement path="${build}/${jar}"/>
      <pathelement path="${test.classes}"/>
      <pathelement path="${build}/${testjar}"/>
      <pathelement path="lib/clover.jar"/>
      <path refid="test.libs"/>
    </path>
  </target>

  <target name="compile" depends="-setup"
          description="Compile all Java source">
    <javac classpathref="compile.path"
           source="${compatibility}"
           target="${compatibility}"
           destdir="${classes}"
           includeantruntime="false"
           deprecation="on" debug="${debug}">
      <src refid="src.path"/>
    </javac>
  </target>

  <target name=":jar">
    <uptodate property="-jar" targetfile="${build}/${jar}">
      <srcfiles dir="${classes}">
        <patternset id="jar-compiled">
          <include name="com/sun/nik/*"/>
          <include name="com/sun/nik/**/*"/>
        </patternset>
      </srcfiles>
    </uptodate>
  </target>

  <target name="jar" depends="-setup,native,:jar" unless="-jar"
          description="Build primary jar">
  </target>

  <target name="javah" depends="compile" unless="-native">
    <javah classpath="${classes}" destdir="${build.native}" force="yes">
      <class name="com.sun.nik.Function"/>
      <class name="com.sun.nik.Native"/>
      <class name="com.sun.nik.win32.DLLCallback"/>
    </javah>
    <condition property="grep" value="/usr/sfw/bin/ggrep">
      <os name="SunOS"/>
    </condition>
    <condition property="grep" value="ggrep">
      <os name="OpenBSD"/>
    </condition>
    <property name="grep" value="grep"/>
    <condition property="grep.required" value="false" else="true">
      <os name="AIX"/>
    </condition>
    <!-- args are based on GNU grep, other versions may differ -->
    <apply dir="${build.native}" executable="${grep}" parallel="true"
           failonerror="${grep.required}" relative="true" output="${md5.file}">
      <arg value="-A"/>
      <arg value="1"/>
      <arg value="JNIEXPORT"/>
      <fileset dir="${build.native}" includes="*.h"/>
    </apply>
    <!-- Clean up gcj javah output to match that of Sun's javah -->
    <fixcrlf file="${md5.file}" eol="unix"/>
    <replaceregexp match="^((.*\.h):JNIEXPORT[^(]+)( +\(.*)"
                   replace="\1&#xa;\2- \3&#xa;--"
		   byline="true"
                   file="${md5.file}"/>
    <replaceregexp match="(JNIEnv *\*) *env"
                   replace="\1"
		   byline="true"
                   file="${md5.file}"/>
    <replaceregexp match="&#xa;--&#xa;.*\.h-$"
                   replace=""
		   flags="m"
                   file="${md5.file}"/>
    <checksum property="md5" file="${md5.file}" />
    <condition property="jni.valid" value="true">
      <or>
        <os name="AIX"/>
        <equals arg1="${jni.md5}" arg2="${md5}" trim="true"/>
        <equals arg1="${jni.md5}" arg2=""/>
      </or>
    </condition>
  </target>

  <!-- Invalidate native libraries when native API changes -->
  <target name="-native-api-check" depends="javah" unless="jni.valid">
    <echo>Invalidating native code, new checksum is ${md5}</echo>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/darwin.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/win32-x86.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/win32-x86-64.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/w32ce-arm.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/linux-x86.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/linux-x86-64.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/linux-arm.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/linux-aarch64.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/linux-ia64.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/linux-ppc.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/linux-ppc64.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/freebsd-x86.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/freebsd-x86-64.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/openbsd-x86.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/openbsd-x86-64.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/sunos-x86.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/sunos-x86-64.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/sunos-sparc.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/sunos-sparcv9.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/android-arm.jar" overwrite="true"/>
    <copy file="${lib.native}/out-of-date.jar" tofile="${lib.native}/android-x86.jar" overwrite="true"/>
    <delete failOnError="false" includeEmptyDirs="true">
      <fileset dir="${build.native}" includes="*.o,*jnidispatch*"/>
    </delete>
    <!--
    <fail>API for native code has changed, or javah output is inconsistent.  Re-run this build after checking ${md5.file} or updating jni.version and jni.md5 in build.xml</fail>
    -->
  </target>

  <target name=":rsrc">
    <condition property="-rsrc">
      <and>
        <not><os family="windows"/></not>
        <not><equals arg1="${os.prefix}" arg2="w32ce-arm"/></not>
      </and>
    </condition>
  </target>
  <target name="rsrc" depends="-setup,:rsrc" unless="-rsrc"
          description="Generate w32 DLL version resource information">
    <property name="rsrc" location="${build.native}/jnidispatch.rc"/>
    <copy todir="${build.native}" file="${native}/jnidispatch.rc"/>
    <replaceregexp match="FILEVERSION.*"
                   replace="FILEVERSION ${jni.major},${jni.minor},${jni.revision},${jni.build}"
                   preserveLastModified="true"
                   file="${rsrc}" byline="true"/>
    <replaceregexp match="PRODUCTVERSION.*"
                   replace="PRODUCTVERSION ${jna.major},${jna.minor},${jna.revision},${jna.build}"
                   preserveLastModified="true"
                   file="${rsrc}" byline="true"/>
    <replaceregexp match="FileVersion.*"
                   replace="FileVersion&quot;,&quot;${jni.version}&quot;"
                   preserveLastModified="true"
                   file="${rsrc}" byline="true"/>
    <replaceregexp match="Full Version.*"
                   replace="Full Version&quot;,&quot;${jni.version} b${jni.build}&quot;"
                   preserveLastModified="true"
                   file="${rsrc}" byline="true"/>
    <replaceregexp match="ProductVersion.*"
                   replace="ProductVersion&quot;,&quot;${spec.version}&quot;"
                   preserveLastModified="true"
                   file="${rsrc}" byline="true"/>
    <replaceregexp match="(Copyright.*-)2..."
                   replace="\1${year}"
                   preserveLastModified="true"
                   file="${rsrc}" byline="true"/>
  </target>

  <target name="native" depends="-enable-native,-setup,javah,-native-api-check,rsrc" unless="-native"
          description="Build native libraries.  Use 'ant -DCC=xxx' to build using a compiler other than gcc">
    <property name="comment" value="# auto-generated by ant"/>
    <replaceregexp match="^JNA_JNI_VERSION=.*"
                   replace="JNA_JNI_VERSION=${jni.version} ${comment}"
                   file="native/Makefile" byline="true"/>
    <replaceregexp match="^CHECKSUM=.*"
                   replace="CHECKSUM=${jni.md5} ${comment}"
                   file="native/Makefile" byline="true"/>
    <!-- Handle cross-compilation -->
    <condition property="make.OS" value="OS=w32ce">
      <equals arg1="${os.prefix}" arg2="w32ce-arm"/>
    </condition>
    <condition property="make.OS" value="OS=android">
      <or>
        <equals arg1="${os.prefix}" arg2="android-arm"/>
        <equals arg1="${os.prefix}" arg2="android-x86"/>
      </or>
    </condition>
    <property name="make.OS" value="IGNORE="/>
    <!-- Ensure Makefile ARCH property properly set -->
    <condition property="ARCH" value="arm">
      <equals arg1="${os.prefix}" arg2="w32ce-arm"/>
    </condition>
    <condition property="ARCH" value="arm">
      <equals arg1="${os.prefix}" arg2="android-arm"/>
    </condition>
    <condition property="ARCH" value="x86">
      <equals arg1="${os.prefix}" arg2="android-x86"/>
    </condition>
    <condition property="ARCH" value="ppc">
      <equals arg1="${os.prefix}" arg2="aix-ppc"/>
    </condition>
    <condition property="ARCH" value="ppc64">
      <equals arg1="${os.prefix}" arg2="aix-ppc64"/>
    </condition>
    <!-- ensure ARCH is set properly for 64-bit capable platforms -->
    <!-- use ANT_OPTS=-d64/-d32 to build 64-bit/32-bit if not the platform default -->
    <property name="ARCH" value="${os.arch}"/>
    <condition property="make.CC" value="CC=${CC}" else="IGNORE=">
      <isset property="CC"/>
    </condition>
    <condition property="make.ARCH" value="ARCH=${ARCH}" else="IGNORE=">
      <isset property="ARCH"/>
    </condition>
    <condition property="make.SDKROOT" value="SDKROOT=${SDKROOT}">
      <isset property="SDKROOT"/>
    </condition>
    <property name="xcode" value="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform"/>
    <condition property="make.SDKROOT"
	       value="SDKROOT=${xcode}/Developer/SDKs/MacOSX10.9.sdk">
      <and>
        <equals arg1="${os.prefix}" arg2="darwin" trim="true"/>
        <available file="${xcode}/Developer/SDKs/MacOSX10.9.sdk"/>
      </and>
    </condition>
    <condition property="make.SDKROOT"
	       value="SDKROOT=${xcode}/Developer/SDKs/MacOSX10.8.sdk">
      <and>
        <equals arg1="${os.prefix}" arg2="darwin" trim="true"/>
        <available file="${xcode}/Developer/SDKs/MacOSX10.8.sdk"/>
      </and>
    </condition>
    <condition property="make.SDKROOT"
	       value="SDKROOT=/Developer/SDKs/MacOSX10.6.sdk">
      <and>
        <equals arg1="${os.prefix}" arg2="darwin" trim="true"/>
        <available file="/Developer/SDKs/MacOSX10.6.sdk"/>
      </and>
    </condition>
    <condition property="make.SDKROOT"
	       value="SDKROOT=/Developer/SDKs/MacOSX10.5.sdk">
      <and>
        <equals arg1="${os.prefix}" arg2="darwin" trim="true"/>
        <available file="/Developer/SDKs/MacOSX10.5.sdk"/>
      </and>
    </condition>
    <condition property="make.SDKROOT"
	       value="SDKROOT=/Developer/SDKs/MacOSX10.4u.sdk" else="IGNORE=">
      <and>
        <equals arg1="${os.prefix}" arg2="darwin" trim="true"/>
        <available file="/Developer/SDKs/MacOSX10.4u.sdk"/>
      </and>
    </condition>
    <!-- Windows' drive letters and spaces in absolute paths wreak havoc on
         make -->
    <condition property="make.BUILD" value="BUILD=../${build}/${native.subdir}" else="BUILD=${build.native}">
      <os family="windows"/>
    </condition>
    <condition property="make.PATH" value="PATH=/opt/csw/bin:/usr/sfw/bin:/usr/bin:/usr/ccs/bin" else="IGNORE=">
      <os name="SunOS"/>
    </condition>
    <condition property="make" value="/usr/sfw/bin/gmake">
      <and>
        <os name="SunOS"/>
        <available file="/usr/sfw/bin/gmake"/>
      </and>
    </condition>
    <condition property="make" value="gmake">
      <or>
        <os name="FreeBSD"/>
        <os name="OpenBSD"/>
        <os name="NetBSD"/>
        <os name="SunOS"/>
        <os name="AIX"/>
      </or>
    </condition>
    <!-- Allow explicit override of make variables -->
    <condition property="make.OPTS" value="${EXTRA_MAKE_OPTS}" else="IGNORE=">
      <isset property="EXTRA_MAKE_OPTS"/>
    </condition>
    <!-- Native resource path within jna.jar -->
    <property name="native.path" value="com/sun/nik/${os.prefix}"/>

    <!-- Default make program -->
    <property name="make" value="make"/>

    <exec executable="${make}" dir="${native}" failonerror="true">
      <arg value="JAVA_HOME=${jdk.home}"/>
      <arg value="JAVAH=${build.native}"/>
      <arg value="DEBUG=${debug.native}"/>
      <arg value="CFLAGS_EXTRA=${cflags_extra.native}"/>
      <arg value="DYNAMIC_LIBFFI=${dynlink.native}"/>
      <arg value="${make.CC}"/>
      <arg value="${make.BUILD}"/>
      <arg value="${make.SDKROOT}"/>
      <arg value="${make.ARCH}"/>
      <arg value="${make.PATH}"/>
      <arg value="${make.OS}"/>
      <arg line="${make.OPTS}"/>
      <arg value="JNA_JNI_VERSION=${jni.version}"/>
      <arg value="CHECKSUM=${jni.md5}"/>
    </exec>
    <mkdir dir="${classes}/${native.path}"/>
    <copy todir="${classes}/${native.path}">
      <fileset dir="${build.native}"
               includes="jnidispatch.dll,libjnidispatch.*"/>
    </copy>
    <mkdir dir="${eclipse.classes}/${native.path}"/>
    <copy todir="${eclipse.classes}/${native.path}"
          failonerror="false">
      <fileset dir="${build.native}"
               includes="jnidispatch.dll,libjnidispatch.*"/>
    </copy>
    <!-- For web start, native libraries may be provided in the root of -->
    <!-- an included jar file -->
    <jar jarfile="${build}/${native.jar}">
      <fileset dir="${build.native}" includes="jnidispatch.dll,libjnidispatch.*"/>
      <manifest>
        <attribute name="Implementation-Version" value="${jni.version} b${jni.build}"/>
        <attribute name="Specification-Version" value="${jni.version}"/>
      </manifest>
    </jar>
    <copy todir="${lib.native}">
      <fileset dir="${build}" includes="${native.jar}"/>
    </copy>
  </target>


  <target name="-enable-native" unless="-native">
    <property name="build-native" value="true"/>
  </target>

  <!-- When running tests from an IDE, be sure to set jna.library.path -->
  <!-- to where the test library (testlib) is found.                   -->
  <target name="test" depends="-enable-native,jar" unless="cross-compile"
          description="Run all unit tests">
    <echo>Tests was disable</echo>
  </target>


  <target name="clean" depends="-dynamic-properties">
    <delete failOnError="false" includeEmptyDirs="true">
      <fileset dir="${build}"/>
    </delete>
    <delete quiet="true" includeEmptyDirs="true">
      <fileset dir=".clover"/>
      <fileset dir="${javadoc}"/>
      <fileset dir="." includes="*~,**/*~,build.number"/>
    </delete>
    <subant target="clean" failonerror="true">
      <fileset dir="${contrib}" includes="*/build.xml"/>
    </subant>
  </target>


  <path id="maven-ant-tasks.classpath" path="lib/maven-ant-tasks-2.1.3.jar" />
  <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
           uri="antlib:org.apache.maven.artifact.ant"
           classpathref="maven-ant-tasks.classpath" />


  <property name="version-maven-gpg-plugin" value="1.4"/>


</project>


